# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - .ci/ros2/azure-pipelines.yml
      - ros2/Dockerfile
      - format/Dockerfile
pr:
  paths:
    include:
      - ci/ros2/azure-pipelines.yml
      - ros2/Dockerfile
      - format/Dockerfile

resources:
- repo: self
variables:
  dockerHub: 'Docker Hub'
  dockerHubID: 'prachandabhanu'

jobs:
  - job: BuildAndPush
    displayName: "ROS2"
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Foxy:
          USE_CUDA: ""
          CUDA_VERSION: 11.4.0
          UBUNTU_DISTRO: 20.04
          ROS_DISTRO: foxy
          tag: $(ROS_DISTRO)-base
        Galactic:
          USE_CUDA: ""
          CUDA_VERSION: 11.4.0
          UBUNTU_DISTRO: 20.04
          ROS_DISTRO: galactic
          tag: $(ROS_DISTRO)-base
        CudaFoxy:
          USE_CUDA: true
          CUDA_VERSION: 11.4.0
          UBUNTU_DISTRO: 20.04
          ROS_DISTRO: foxy
          tag: CUDA$(ROS_DISTRO)-base
        CudaGalactic:
          USE_CUDA: true
          CUDA_VERSION: 11.4.0
          UBUNTU_DISTRO: 20.04
          ROS_DISTRO: galactic
          tag: CUDA$(ROS_DISTRO)-base
    steps:
      - task: Docker@2
        displayName: "Docker Image Build"
        inputs:
          command: build
          arguments: |
            --no-cache
            --build-arg USE_CUDA=$(USE_CUDA)
            --build-arg CUDA_VERSION=$(CUDA_VERSION)
            --build-arg UBUNTU_DISTRO=$(UBUNTU_DISTRO)
            --build-arg ROS_DISTRO=$(ROS_DISTRO)
            -t $(dockerHubID)/env:$(tag)
          Dockerfile: '$(Build.SourcesDirectory)/ros2/Dockerfile'
          tags: "$(tag)"
      - task: Docker@2
        inputs:
          command: 'push'
          containerRegistry: $(dockerHub)
          repository: $(dockerHubID)/env
          tags: "$(tag)"
    
  - job: 
    displayName: "Alpine Clang Formating"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Docker@2
        displayName: 'Docker Image for Clang Formating'
        inputs:
          command: build
          arguments: |
            --no-cache
            -t $(dockerHubID)/env:fmt
          Dockerfile: '$(Build.SourcesDirectory)/format/Dockerfile'
          tags: "fmt"

      - task: Docker@2
        inputs:
          command: 'push'
          containerRegistry: $(dockerHub)
          repository: $(dockerHubID)/env
          tags: "fmt"
